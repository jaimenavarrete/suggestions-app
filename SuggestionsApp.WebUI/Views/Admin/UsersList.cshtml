@model UsersListViewModel
@{
    Layout = "_AdminLayout";

    ViewData["Title"] = "Lista de usuarios";
    ViewData["ActivePage"] = ManageAdminNavPages.UsersList;
}

<!-- Modal -->
<partial name="_UsersListModal" model="Model" />

<h3 class="fw-bold display-6 mb-4">Lista de usuarios</h3>

<!-- Status message alert -->
<partial name="_StatusMessage" />

<section class="d-flex justify-content-between">
    <button type="button" id="button-create-user" class="btn btn-success mb-4" data-bs-toggle="modal" data-bs-target="#form-user-modal">
        <i class="las la-plus fs-4"></i> Agregar usuario
    </button>
    <a asp-controller="Reports" asp-action="PrintUsers" class="btn btn-outline-dark mb-4" target="_blank">
        <i class="las la-print fs-4"></i> Imprimir usuarios
    </a>
</section>

<div class="table-responsive">
    <table class="table table-hover table-striped">
        <thead>
            <tr class="table-primary">
                <th scope="col">Nombre de usuario</th>
                <th scope="col">Email</th>
                <th scope="col">Rol</th>
                <th scope="col">Verificado</th>
                <th scope="col">Estado</th>
                <th scope="col">Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var user in Model.UsersList)
            {
                <tr>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <td class="@(user.Role == "Admin" ? "fw-bold text-danger" : "")">@user.Role</td>

                    @if(user.EmailConfirmed)
                    {
                        <td class="fw-bold text-success">Si</td>
                    }
                    else
                    {
                        <td class="fw-bold text-danger">No</td>
                    }

                    @if(user.LockedOut)
                    {
                        <td class="fw-bold text-danger">Bloqueado</td>
                    }
                    else
                    {
                        <td>Desbloqueado</td>
                    }

                    <td>
                        <div class="d-flex">
                            <form asp-controller="Admin" asp-action="ChangeUserLockState" method="post" class="button-block-user">
                                <input type="hidden" value="@user.Id" name="id" />
                                <button class="bg-transparent border-0 p-0"><i class="las la-lock text-warning fs-3 px-1"></i></button>
                            </form>
                            <form asp-controller="Admin" asp-action="DeleteUser" method="post" class="delete-element-form">
                                <input type="hidden" value="@user.Id" name="id" />
                                <button class="bg-transparent border-0 p-0"><i class="las la-trash text-danger fs-3 px-1"></i></button>
                            </form>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@section Scripts {
    <script>

        // Block user button confirm dialog
        const btnBlockUser = document.querySelectorAll('.button-block-user');

        btnBlockUser.forEach((form) => {
            form.addEventListener('submit', (e) => {
                e.preventDefault();

                Swal.fire({
                    title: '¿Está seguro?',
                    text: 'Cambiará el estado de bloqueo del usuario.',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Si, cambiar',
                }).then((result) => {
                    if (result.isConfirmed) {
                        form.submit();
                    }
                });
            });
        });

        // Modal form validations
        const btnCreateUser = document.getElementById('button-create-user');
        const form = document.getElementById('form-create');
        const inputs = document.querySelectorAll('.input-create');

        // Clear input value with button to create user
        btnCreateUser.addEventListener('click', () => {
            inputs.forEach((input) => (input.value = ''));

            // Hide invalid feedback
            const activeFeedback = document.querySelectorAll('.is-invalid');
            activeFeedback.forEach((label) => label.classList.remove('is-invalid'));
        });

        // Validate inputs
        const validUserNameInput = () => {
            const userNameInput = document.getElementById('input-username');
            const userNameInvalidLabel = document.getElementById('feedback-username');
            let valid = true;

            // Clear elements
            userNameInput.classList.remove('is-invalid');
            userNameInvalidLabel.innerHTML = '';

            if (!userNameInput.value) {
                userNameInvalidLabel.innerHTML +=
                    'Debe agregar un nombre de usuario.<br/>';
                valid = false;
            }

            if (userNameInput.value.length < 5) {
                userNameInvalidLabel.innerHTML += 'Requiere al menos 5 caracteres.';
                valid = false;
            }

            if (!valid) userNameInput.classList.add('is-invalid');

            return valid;
        };

        const validEmailInput = () => {
            const emailInput = document.getElementById('input-email');
            const emailInvalidLabel = document.getElementById('feedback-email');
            let valid = true;
            let emailRegex = /^\w+([\.-]?\w+)*@@\w+([\.-]?\w+)*(\.\w{2,4})+$/;

            // Clear elements
            emailInput.classList.remove('is-invalid');
            emailInvalidLabel.innerHTML = '';

            if (!emailInput.value) {
                emailInvalidLabel.innerHTML += 'Debe agregar un email.<br/>';
                valid = false;
            }

            if (!emailRegex.test(emailInput.value)) {
                emailInvalidLabel.innerHTML += 'El email agregado es inválido.<br/>';
                valid = false;
            }

            if (!valid) emailInput.classList.add('is-invalid');

            return valid;
        };

        const validRoleInput = () => {
            const roleInput = document.getElementById('input-role');
            let valid = true;

            // Clear elements
            roleInput.classList.remove('is-invalid');

            if (!roleInput.value) {
                roleInput.classList.add('is-invalid');
                valid = false;
            }

            return valid;
        };

        const validPasswordInput = () => {
            const passwordInput = document.getElementById('input-password');
            const passwordInvalidLabel = document.getElementById('feedback-password');
            let valid = true;

            // Clear elements
            passwordInput.classList.remove('is-invalid');
            passwordInvalidLabel.innerHTML = '';

            if (!passwordInput.value) {
                passwordInvalidLabel.innerHTML += 'Debe agregar una contraseña.<br>';
                valid = false;
            }

            // Digit validation
            if (passwordInput.value.search(/\d/) === -1) {
                passwordInvalidLabel.innerHTML += 'Requiere al menos 1 dígito.<br>';
                valid = false;
            }
            // Lowercase validation
            if (passwordInput.value.search(/[a-z]/) === -1) {
                passwordInvalidLabel.innerHTML +=
                    'Requiere al menos 1 caracter en minúscula.<br>';
                valid = false;
            }
            // Uppercase validation
            if (passwordInput.value.search(/[A-Z]/) === -1) {
                passwordInvalidLabel.innerHTML +=
                    'Requiere al menos 1 caracter en mayúscula.<br>';
                valid = false;
            }
            // Alphanumeric validation
            if (passwordInput.value.search(/\W/) === -1) {
                passwordInvalidLabel.innerHTML +=
                    'Requiere al menos 1 caracter alfanumérico.<br>';
                valid = false;
            }
            // Length validation
            if (passwordInput.value.length < 6) {
                passwordInvalidLabel.innerHTML += 'Requiere al menos 6 caracteres.<br>';
                valid = false;
            }

            if (!valid) passwordInput.classList.add('is-invalid');

            return valid;
        };

        const validRepeatPasswordInput = () => {
            const passwordInput = document.getElementById('input-password');
            const repeatPasswordInput = document.getElementById(
                'input-repeat-password'
            );
            let valid = true;

            // Clear elements
            repeatPasswordInput.classList.remove('is-invalid');

            if (passwordInput.value !== repeatPasswordInput.value) {
                repeatPasswordInput.classList.add('is-invalid');
                valid = false;
            }

            return valid;
        };

        const validateInput = (input) => {
            switch (input.id) {
                case 'input-username':
                    return validUserNameInput();
                case 'input-email':
                    return validEmailInput();
                case 'input-role':
                    return validRoleInput();
                case 'input-password':
                    return validPasswordInput();
                case 'input-repeat-password':
                    return validRepeatPasswordInput();
            }
        };

        const validateForm = () => {
            let valid = true;

            inputs.forEach((input) => {
                if (!validateInput(input)) {
                    valid = false;
                }
            });

            return valid;
        };

        form.addEventListener('submit', (e) => {
            e.preventDefault();

            if (validateForm()) {
                form.submit();
            }
        });

    </script>
}